---
// Hash Generator Component
---

<div class="bg-gray-800/50 backdrop-blur-sm p-6 rounded-2xl shadow-lg w-full max-w-2xl mx-auto border border-gray-700/80">
    <div class="space-y-4">
        <div>
            <label for="hash-input" class="block text-sm font-bold text-gray-300 mb-2">Texto de Entrada</label>
            <textarea id="hash-input" rows="5" class="w-full p-3 bg-gray-900/70 text-white border-2 border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" placeholder="Escribe o pega aquÃ­ el texto..."></textarea>
        </div>

        <div>
            <label for="algo-select" class="block text-sm font-bold text-gray-300 mb-2">Algoritmo</label>
            <select id="algo-select" class="w-full p-3 bg-gray-900/70 text-white border-2 border-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="SHA-256">SHA-256</option>
                <option value="SHA-1">SHA-1</option>
                <option value="SHA-512">SHA-512</option>
            </select>
        </div>

        <div>
            <label for="hash-output" class="block text-sm font-bold text-gray-300 mb-2">Hash de Salida (Hex)</label>
            <div class="relative">
                <input type="text" id="hash-output" class="w-full p-3 pr-12 bg-gray-900/70 text-white font-mono border-2 border-gray-700 rounded-lg" readonly>
                <button id="copy-btn" class="absolute inset-y-0 right-0 flex items-center px-3 text-gray-400 hover:text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    const input = document.getElementById('hash-input') as HTMLTextAreaElement;
    const algoSelect = document.getElementById('algo-select') as HTMLSelectElement;
    const output = document.getElementById('hash-output') as HTMLInputElement;
    const copyBtn = document.getElementById('copy-btn');

    async function generateHash() {
        const text = input.value;
        const algorithm = algoSelect.value;

        if (!text) {
            output.value = '';
            return;
        }

        try {
            const encoder = new TextEncoder();
            const data = encoder.encode(text);
            const hashBuffer = await crypto.subtle.digest(algorithm, data);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            output.value = hashHex;
        } catch (e) {
            output.value = 'Error al generar el hash.';
        }
    }

    input.addEventListener('input', generateHash);
    algoSelect.addEventListener('change', generateHash);
    
    copyBtn?.addEventListener('click', () => {
        if (output.value) {
            navigator.clipboard.writeText(output.value).then(() => {
                const icon = copyBtn.innerHTML;
                copyBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7" /></svg>`;
                setTimeout(() => { copyBtn.innerHTML = icon; }, 2000);
            });
        }
    });

    // Initial hash generation
    generateHash();
</script>
